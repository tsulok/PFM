package com.pinup.pfm.model.database;

import com.pinup.pfm.model.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TRANSACTION".
 */
public class Transaction implements java.io.Serializable {

    private String id;
    private String serverId;
    private java.util.Date lastSyncDate;
    private java.util.Date lastModifyDate;
    private java.util.Date lastImageSyncDate;
    private java.util.Date lastImageModifyDate;
    private String name;
    /** Not-null value. */
    private java.util.Date date;
    private Double latitude;
    private Double longitude;
    private String imageUri;
    private double amount;
    /** Not-null value. */
    private String currency;
    private String description;
    private String tag;
    private String categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TransactionDao myDao;

    private Category category;
    private String category__resolvedKey;


    public Transaction() {
    }

    public Transaction(String id) {
        this.id = id;
    }

    public Transaction(String id, String serverId, java.util.Date lastSyncDate, java.util.Date lastModifyDate, java.util.Date lastImageSyncDate, java.util.Date lastImageModifyDate, String name, java.util.Date date, Double latitude, Double longitude, String imageUri, double amount, String currency, String description, String tag, String categoryId) {
        this.id = id;
        this.serverId = serverId;
        this.lastSyncDate = lastSyncDate;
        this.lastModifyDate = lastModifyDate;
        this.lastImageSyncDate = lastImageSyncDate;
        this.lastImageModifyDate = lastImageModifyDate;
        this.name = name;
        this.date = date;
        this.latitude = latitude;
        this.longitude = longitude;
        this.imageUri = imageUri;
        this.amount = amount;
        this.currency = currency;
        this.description = description;
        this.tag = tag;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTransactionDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getServerId() {
        return serverId;
    }

    public void setServerId(String serverId) {
        this.serverId = serverId;
    }

    public java.util.Date getLastSyncDate() {
        return lastSyncDate;
    }

    public void setLastSyncDate(java.util.Date lastSyncDate) {
        this.lastSyncDate = lastSyncDate;
    }

    public java.util.Date getLastModifyDate() {
        return lastModifyDate;
    }

    public void setLastModifyDate(java.util.Date lastModifyDate) {
        this.lastModifyDate = lastModifyDate;
    }

    public java.util.Date getLastImageSyncDate() {
        return lastImageSyncDate;
    }

    public void setLastImageSyncDate(java.util.Date lastImageSyncDate) {
        this.lastImageSyncDate = lastImageSyncDate;
    }

    public java.util.Date getLastImageModifyDate() {
        return lastImageModifyDate;
    }

    public void setLastImageModifyDate(java.util.Date lastImageModifyDate) {
        this.lastImageModifyDate = lastImageModifyDate;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public String getImageUri() {
        return imageUri;
    }

    public void setImageUri(String imageUri) {
        this.imageUri = imageUri;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    /** Not-null value. */
    public String getCurrency() {
        return currency;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(String categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        String __key = this.categoryId;
        if (category__resolvedKey == null || category__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
