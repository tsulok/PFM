package com.pinup.pfm.model.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.pinup.pfm.model.database.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION".
*/
public class TransactionDao extends AbstractDao<Transaction, String> {

    public static final String TABLENAME = "TRANSACTION";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "SERVER_ID");
        public final static Property LastSyncDate = new Property(2, java.util.Date.class, "lastSyncDate", false, "LAST_SYNC_DATE");
        public final static Property LastModifyDate = new Property(3, java.util.Date.class, "lastModifyDate", false, "LAST_MODIFY_DATE");
        public final static Property LastImageSyncDate = new Property(4, java.util.Date.class, "lastImageSyncDate", false, "LAST_IMAGE_SYNC_DATE");
        public final static Property LastImageModifyDate = new Property(5, java.util.Date.class, "lastImageModifyDate", false, "LAST_IMAGE_MODIFY_DATE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property Latitude = new Property(8, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, Double.class, "longitude", false, "LONGITUDE");
        public final static Property ImageUri = new Property(10, String.class, "imageUri", false, "IMAGE_URI");
        public final static Property Amount = new Property(11, double.class, "amount", false, "AMOUNT");
        public final static Property Currency = new Property(12, String.class, "currency", false, "CURRENCY");
        public final static Property Description = new Property(13, String.class, "description", false, "DESCRIPTION");
        public final static Property Tag = new Property(14, String.class, "tag", false, "TAG");
        public final static Property CategoryId = new Property(15, String.class, "categoryId", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;


    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SERVER_ID\" TEXT," + // 1: serverId
                "\"LAST_SYNC_DATE\" INTEGER," + // 2: lastSyncDate
                "\"LAST_MODIFY_DATE\" INTEGER," + // 3: lastModifyDate
                "\"LAST_IMAGE_SYNC_DATE\" INTEGER," + // 4: lastImageSyncDate
                "\"LAST_IMAGE_MODIFY_DATE\" INTEGER," + // 5: lastImageModifyDate
                "\"NAME\" TEXT," + // 6: name
                "\"DATE\" INTEGER NOT NULL ," + // 7: date
                "\"LATITUDE\" REAL," + // 8: latitude
                "\"LONGITUDE\" REAL," + // 9: longitude
                "\"IMAGE_URI\" TEXT," + // 10: imageUri
                "\"AMOUNT\" REAL NOT NULL ," + // 11: amount
                "\"CURRENCY\" TEXT NOT NULL ," + // 12: currency
                "\"DESCRIPTION\" TEXT," + // 13: description
                "\"TAG\" TEXT," + // 14: tag
                "\"CATEGORY_ID\" TEXT);"); // 15: categoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        java.util.Date lastSyncDate = entity.getLastSyncDate();
        if (lastSyncDate != null) {
            stmt.bindLong(3, lastSyncDate.getTime());
        }
 
        java.util.Date lastModifyDate = entity.getLastModifyDate();
        if (lastModifyDate != null) {
            stmt.bindLong(4, lastModifyDate.getTime());
        }
 
        java.util.Date lastImageSyncDate = entity.getLastImageSyncDate();
        if (lastImageSyncDate != null) {
            stmt.bindLong(5, lastImageSyncDate.getTime());
        }
 
        java.util.Date lastImageModifyDate = entity.getLastImageModifyDate();
        if (lastImageModifyDate != null) {
            stmt.bindLong(6, lastImageModifyDate.getTime());
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getDate().getTime());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        String imageUri = entity.getImageUri();
        if (imageUri != null) {
            stmt.bindString(11, imageUri);
        }
        stmt.bindDouble(12, entity.getAmount());
        stmt.bindString(13, entity.getCurrency());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(14, description);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(15, tag);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(16, categoryId);
        }
    }

    @Override
    protected void attachEntity(Transaction entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // lastSyncDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastModifyDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // lastImageSyncDate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // lastImageModifyDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imageUri
            cursor.getDouble(offset + 11), // amount
            cursor.getString(offset + 12), // currency
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // description
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tag
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // categoryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastSyncDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLastModifyDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLastImageSyncDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLastImageModifyDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setImageUri(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAmount(cursor.getDouble(offset + 11));
        entity.setCurrency(cursor.getString(offset + 12));
        entity.setDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTag(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCategoryId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Transaction entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM TRANSACTION T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.\"CATEGORY_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Transaction loadCurrentDeep(Cursor cursor, boolean lock) {
        Transaction entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);

        return entity;    
    }

    public Transaction loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Transaction> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Transaction> list = new ArrayList<Transaction>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Transaction> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Transaction> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
